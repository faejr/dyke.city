---
import Layout from "../layouts/Layout.astro";
import { createHandle } from "../handle";
import { Prisma } from "@prisma/client";
import { getHandle } from "../handle";

if (Astro.url.hostname.indexOf("dyke.city") !== -1) {
  const handle = Astro.url.hostname.split(".")[0];
  if (handle && handle !== "www") {
    try {
      const data = await getHandle({ handle });
      if (data) {
        return Astro.redirect(`https://bsky.app/profile/${handle}.dyke.city`);
      }
    } catch (ex) {}
  }
}

const errors = { bskyHandle: "", requestedHandle: "", inviteCode: "" };
let oldData = { bskyHandle: "", requestedHandle: "", inviteCode: "" };
const successMessage = { display: false, message: "" };

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const bskyHandle = data.get("bskyHandle") as string;
    const requestedHandle = data.get("requestedHandle") as string;
    const inviteCode = data.get("inviteCode") as string;
    oldData = { bskyHandle, requestedHandle, inviteCode };
    if (typeof bskyHandle !== "string" || bskyHandle.length < 1) {
      errors.bskyHandle = "Please enter your bluesky handle.";
    }
    let bskyDid = "";
    if (bskyHandle.length > 1) {
      const didData = await fetch(
        `https://bsky.social/xrpc/com.atproto.identity.resolveHandle?handle=${bskyHandle}`
      ).then((data) => data.json());
      if (Boolean(didData.error)) {
        errors.bskyHandle = "Please enter a valid bluesky handle.";
      }
      bskyDid = didData.did;
    }
    if (typeof requestedHandle !== "string" || requestedHandle.length < 1) {
      errors.requestedHandle = "Please enter your requested handle.";
    }
    if (typeof inviteCode !== "string" || inviteCode.length < 1) {
      errors.inviteCode = "Please enter your invite code.";
    }
    const hasErrors = Object.values(errors).some((msg) => msg);
    if (!hasErrors) {
      await createHandle({ bskyHandle, bskyDid, requestedHandle, inviteCode });
      successMessage.display = true;
      successMessage.message = `Your handle ${requestedHandle}.dyke.city has been created, follow the instructions above to use it.`;
      Object.keys(oldData).forEach((v) => (oldData[v] = ""));
    }
  } catch (error) {
    if (error instanceof Error) {
      if (error.cause === "inviteCode") {
        errors.inviteCode = "Please enter a valid invite code.";
      }
      if (error instanceof Prisma.PrismaClientKnownRequestError) {
        if (error.code === "P2002") {
          (error.meta.target as string[]).forEach((target) => {
            errors[target] = "Handle already taken";
          });
        }
      }
      console.error(error);
    }
  }
}
---

<Layout title="dyke.city">
  <main>
    <img src="/assets/logo.png" />
    <p>The only place to get a dyke.city handle on bluesky</p>
    <h2>Instructions</h2>
    <ul>
      <li>Fill the desired handle below</li>
      <li>Press create handle</li>
      <li>
        On success go to your bluesky settings <a
          href="https://bsky.app/settings">https://bsky.app/settings</a
        >
      </li>
      <li>Click "Change handle" and "I have my own domain" in the popup</li>
      <li>Click "No DNS Panel"</li>
      <li>
        Enter your requested handle as listed on this site (e.g. fae.dyke.city)
      </li>
      <li>Click "Verify Text File"</li>
    </ul>
    {
      successMessage.display && (
        <pre>
          <code>{successMessage.message}</code>
        </pre>
      )
    }
    <form method="post">
      <label for="bskyHandle">Your bluesky handle</label>
      <input
        type="text"
        id="bskyHandle"
        name="bskyHandle"
        placeholder="username.bsky.social"
        value={oldData.bskyHandle}
      />
      {errors.bskyHandle && <p class="error">{errors.bskyHandle}</p>}
      <label for="bskyHandle">The handle you want</label>
      <div class="handle">
        <input
          type="text"
          id="requestedHandle"
          name="requestedHandle"
          value={oldData.requestedHandle}
        />
        <div>.dyke.social</div>
      </div>
      {errors.requestedHandle && <p class="error">{errors.requestedHandle}</p>}
      <label for="inviteCode">Your invite code</label>
      <input
        type="text"
        id="inviteCode"
        name="inviteCode"
        value={oldData.inviteCode}
      />
      {errors.inviteCode && <p class="error">{errors.inviteCode}</p>}
      <input type="submit" value="Create handle" />
    </form>
    <p>
      Don't have an invite code? Contact <a
        href="https://bsky.app/profile/fae.dyke.city">@fae.dyke.city</a
      >
    </p>
  </main>
</Layout>

<style>
  .handle {
    border-radius: 6px;
    color: var(--form-placeholder);
  }
  .handle input {
    display: inline-block;
  }
  .handle div {
    display: inline-block;
    padding: 10px;
  }
  ul {
    list-style-type: decimal;
  }
  .error {
    color: red;
    margin-top: 0;
  }
</style>
